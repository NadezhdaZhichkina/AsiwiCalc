import streamlit as st
import pandas as pd
from io import BytesIO
from docx import Document

st.set_page_config(page_title="–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–∏–±—ã–ª–∏", layout="centered")
st.title("üî¢ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–æ–π –ø—Ä–∏–±—ã–ª–∏")

# –¢–æ–ª—å–∫–æ –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞
partners = {
    "–ü–∞—Ä—Ç–Ω—ë—Ä —Å –ù–î–°": {"nds": True},
    "–ü–∞—Ä—Ç–Ω—ë—Ä –±–µ–∑ –ù–î–°": {"nds": False},
}

partner_name = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:", list(partners.keys()))
partner_nds = partners[partner_name]["nds"]

uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (Excel –∏–ª–∏ DOCX):", type=["xlsx", "xls", "docx"])

def parse_file(file):
    if file.name.endswith(".xlsx") or file.name.endswith(".xls"):
        df = pd.read_excel(file)
    elif file.name.endswith(".docx"):
        doc = Document(file)
        rows = []
        for table in doc.tables:
            for row in table.rows:
                cols = [cell.text.strip() for cell in row.cells]
                if len(cols) >= 2:
                    try:
                        cost = float(cols[1].replace(",", ".").replace(" ", ""))
                        rows.append([cols[0], cost])
                    except:
                        continue
        df = pd.DataFrame(rows, columns=["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–°—Ç–æ–∏–º–æ—Å—Ç—å"])
    else:
        df = pd.DataFrame()
    return df

def find_price_column(df):
    possible_names = [
        "—Å—Ç–æ–∏–º–æ—Å—Ç—å", "—Ü–µ–Ω–∞", "—Å—Ç–æ–∏–º–æ—Å—Ç—å —Å –Ω–¥—Å", "—Ü–µ–Ω–∞ —Å –Ω–¥—Å", "—Å—Ç–æ–∏–º–æ—Å—Ç—å –±–µ–∑ –Ω–¥—Å"
    ]
    for col in df.columns:
        if isinstance(col, str):
            col_lower = col.lower().strip()
            for name in possible_names:
                if name in col_lower:
                    return col
    return None

def generate_docx(table_df, total):
    doc = Document()
    doc.add_heading('–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞', 0)
    table = doc.add_table(rows=1, cols=2)
    table.autofit = True
    hdr_cells = table.rows[0].cells
    hdr_cells[0].text = '–£—Å–ª—É–≥–∞'
    hdr_cells[1].text = '–¶–µ–Ω–∞ —Å –ù–î–° (‚ÇΩ)'

    for i, row in table_df.iterrows():
        cells = table.add_row().cells
        cells[0].text = str(row['–£—Å–ª—É–≥–∞'])
        cells[1].text = f"{row['–¶–µ–Ω–∞ —Å –ù–î–°']:,.2f}".replace(",", " ")

    doc.add_paragraph()
    doc.add_paragraph(f"–ò—Ç–æ–≥–æ —Å –ù–î–°: {total:,.2f} ‚ÇΩ".replace(",", " "))
    byte_io = BytesIO()
    doc.save(byte_io)
    byte_io.seek(0)
    return byte_io

if uploaded_file:
    df_spec = parse_file(uploaded_file)
    if df_spec.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —É—Å–ª—É–≥–∏ –∏ —Ü–µ–Ω—ã.")
    else:
        st.subheader("üìÑ –°—á–∏—Ç–∞–Ω–Ω–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è:")
        st.dataframe(df_spec)

        price_col = find_price_column(df_spec)
        if not price_col:
            st.error("‚ùå –¢–∞–±–ª–∏—Ü–∞ –¥–æ–ª–∂–Ω–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫—É —Å —Ü–µ–Ω–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–°—Ç–æ–∏–º–æ—Å—Ç—å', '–¶–µ–Ω–∞ —Å –ù–î–°' –∏ —Ç.–ø.).")
        else:
            first_col = df_spec.columns[0]
            total_partner_sum = df_spec[price_col].sum()

            st.markdown(f"**–°—É–º–º–∞ –æ—Ç –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:** `{total_partner_sum:,.2f} ‚ÇΩ`")

            st.markdown("### ‚ûï –†–∞—Å—á—ë—Ç —á–∏—Å—Ç–æ–π –ø—Ä–∏–±—ã–ª–∏")
            client_sum = st.number_input("–°—É–º–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø–ª–∞–Ω–∏—Ä—É–µ–º –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É (–≤–∫–ª—é—á–∞–µ—Ç –ù–î–°):", value=0.0, step=1000.0)
            desired_profit = st.number_input("–ñ–µ–ª–∞–µ–º–∞—è —á–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å (–æ–±—Ä–∞—Ç–Ω—ã–π —Ä–∞—Å—á—ë—Ç):", value=0.0, step=1000.0)

            nds_included = False
            if partner_nds:
                nds_included = st.checkbox("–°—É–º–º–∞ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤–∫–ª—é—á–∞–µ—Ç –ù–î–°", value=True)

            col1, col2 = st.columns(2)
            with col1:
                calc_button = st.button("üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å –ø—Ä–∏–±—ã–ª—å")
            with col2:
                spec_button = st.button("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤ DOCX/Excel")

            if calc_button and client_sum > 0:
                st.markdown("### üìä –†–∞—Å—á—ë—Ç –ø—Ä–∏–±—ã–ª–∏")
                client_nds = client_sum * 20 / 120
                client_net = client_sum - client_nds

                if partner_nds:
                    if nds_included:
                        nds_sub = total_partner_sum * 20 / 120
                        net_sub = total_partner_sum - nds_sub
                    else:
                        net_sub = total_partner_sum
                        nds_sub = net_sub * 0.20
                        total_partner_sum = net_sub + nds_sub

                    nds_loss = nds_sub * 0.75
                    direct_costs = net_sub + nds_loss
                    tax_base = client_net - direct_costs
                    tax = tax_base * 0.05
                    profit = tax_base - tax

                    st.markdown(f"- **–ù–î–° –ø–æ–¥—Ä—è–¥—á–∏–∫–∞:** `{nds_sub:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É:** `{net_sub:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–î–° –∫–ª–∏–µ–Ω—Ç–∞:** `{client_nds:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** `{client_net:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–£–±—ã—Ç–æ–∫ –ø–æ –ù–î–° (75%):** `{nds_loss:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ü—Ä—è–º—ã–µ —Ä–∞—Å—Ö–æ–¥—ã:** `{direct_costs:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:** `{tax_base:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (5%):** `{tax:,.2f} ‚ÇΩ`")
                    st.success(f"üí∞ **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:** `{profit:,.2f} ‚ÇΩ`")
                else:
                    tax_base = client_net - total_partner_sum
                    tax = tax_base * 0.05
                    profit = tax_base - tax

                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –ø–æ–¥—Ä—è–¥—á–∏–∫—É (–±–µ–∑ –ù–î–°):** `{total_partner_sum:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–î–° –∫–ª–∏–µ–Ω—Ç–∞:** `{client_nds:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–µ—Ç—Ç–æ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:** `{client_net:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥–æ–≤–∞—è –±–∞–∑–∞:** `{tax_base:,.2f} ‚ÇΩ`")
                    st.markdown(f"- **–ù–∞–ª–æ–≥ –Ω–∞ –ø—Ä–∏–±—ã–ª—å (5%):** `{tax:,.2f} ‚ÇΩ`")
                    st.success(f"üí∞ **–ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å:** `{profit:,.2f} ‚ÇΩ`")

            if desired_profit > 0:
                d = desired_profit
                if partner_nds:
                    if nds_included:
                        nds_sub = total_partner_sum * 20 / 120
                        net_sub = total_partner_sum - nds_sub
                    else:
                        net_sub = total_partner_sum
                    nds_loss = net_sub * 0.2 * 0.75
                    tax_base = d / 0.95
                    net_client = net_sub + nds_loss + tax_base
                    x = net_client * 1.2
                else:
                    net_sum = d / 0.95 + total_partner_sum
                    x = net_sum * 1.2
                st.info(f"üßæ –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å **{desired_profit:,.2f} ‚ÇΩ** –ø—Ä–∏–±—ã–ª–∏, –Ω—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É: **{x:,.2f} ‚ÇΩ**")
                client_sum = x

            if spec_button:
                st.markdown("### üìë –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
                spec_df = df_spec.copy()
                total_original = spec_df[price_col].sum()

                if client_sum <= 0 or total_original == 0:
                    st.warning("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—É—Å—Ç–∞—è.")
                else:
                    k = client_sum / total_original
                    spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"] = spec_df[price_col] * k
                    spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"] = spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"].round(2)

                    total_for_client = spec_df["–¶–µ–Ω–∞ —Å –ù–î–°"].sum()
                    spec_display = spec_df[[first_col, "–¶–µ–Ω–∞ —Å –ù–î–°"]].rename(columns={first_col: "–£—Å–ª—É–≥–∞"})

                    st.dataframe(spec_display)
                    st.markdown(f"üíº **–ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ (—Å –ù–î–°): `{total_for_client:,.2f} ‚ÇΩ`**")

                    docx_file = generate_docx(spec_display, total_for_client)
                    st.download_button(
                        label="üíæ –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (DOCX)",
                        data=docx_file,
                        file_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_–¥–ª—è_–∫–ª–∏–µ–Ω—Ç–∞.docx",
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                    )

                    excel_io = BytesIO()
                    with pd.ExcelWriter(excel_io, engine="openpyxl") as writer:
                        spec_display.to_excel(writer, index=False, sheet_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
                        worksheet = writer.sheets["–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è"]
                        worksheet.cell(row=len(spec_display) + 2, column=1, value="–ò—Ç–æ–≥–æ:")
                        worksheet.cell(row=len(spec_display) + 2, column=2, value=total_for_client)
                    excel_io.seek(0)

                    st.download_button(
                        label="üì• –°–∫–∞—á–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é (Excel)",
                        data=excel_io,
                        file_name="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_–¥–ª—è_–∫–ª–∏–µ–Ω—Ç–∞.xlsx",
                        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
                    )
